pipeline {
    agent any
    environment {
        BACKEND = 'springboot'
        TAG = 'test'
        RENAME_JAR = 'springboot'
        BUILD_CMD = 'bootJar'
        WORKSPACE_DIR = ''
    }
    stages {        
        stage('remove spring docker iamge&container') {
            steps {
                script { 
                    try {
                        // sh 'docker image prune -a -f'
                        sh "docker ps -q --filter name=${env.BACKEND} | grep -q . && docker stop springboot && docker rm ${env.BACKEND}"
                        sh "docker rmi \$(docker images --filter=reference='${env.TAG}' -q)"
                    } catch(e){
                        echo 'remove spring docker image&container fail!'
                    }
                }
            }
        }

        stage('build spring project') {
            steps {
                sh 'ls -al'
                dir('potato'){         
                    sh 'ls -al'  
                    sh 'echo test1'
                    sh 'echo ======'  
                    dir('build/libs') {
                        sh 'echo ======'  
                        sh 'echo test2'

                        sh 'ls -al'  
                        sh 'echo test2'
                       sh 'rm -rf *.jar'
                       sh 'echo ======'  
                    }
                    sh 'echo test3'
                    sh 'echo ======'  
                    sh 'ls -al' 
                    sh 'chmod +x ./gradlew'
                    sh "./gradlew ${env.BUILD_CMD}"
                    
                    dir('build/libs'){
                        sh 'echo ======'  
                        sh 'ls -al' 
                        sh "mv *.jar ${env.RENAME_JAR}.jar"
                    }
                }
            }
        }

        stage('deploy'){
            steps{
                sh 'docker build -t test:v1.0 .'
                sh "docker run -d -p 8088:8080 --name ${env.BACKEND} ${env.TAG}:v1.0"
            }
        }
    }
}

