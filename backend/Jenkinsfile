pipeline {
    agent any
    environment {
        BACKEND = 'backend'
        TAG = 'latest'
        RENAME_JAR = 'backend'
        BUILD_CMD = 'bootJar'
        WORKSPACE_DIR = ''
    }
    stages {        
        stage('remove spring docker iamge&container') {
            steps {
                script { 
                    try {
                        sh 'docker image prune -a -f'
                        //sh "docker ps -q --filter name=${env.BACKEND} | grep -q . && docker stop ${env.BACKEND} && docker rm ${env.BACKEND}"
                      //  sh "docker rmi \$(docker images --filter=reference='${env.BACKEND}:${env.TAG}' -q)"
                        sh "docker rm -f \$(docker ps -aqf \"name=^/${env.BACKEND}\$\")"
                        sh "docker rmi ${env.BACKEND}"
                    } catch(e){
                        echo 'remove spring docker image&container fail!'
                    }
                }
            }
        }

        stage('build spring project') {
            steps {
                sh 'ls -al'
                sh 'pwd'
                sh 'rm -rf ./backend/src/main/resources'
                sh 'mkdir ./backend/src/main/resources'
                sh 'cp ./application.yml ./backend/src/main/resources'
                sh 'cd ./backend/src/main && ls -al'
                //dir('backend'){
                    //sh 'docker 
                    //sh 'echo test3'
                    //sh 'pwd'
                    //sh 'echo ======'  
                    //sh 'chmod +x ./gradlew'
                    //sh "./gradlew ${env.BUILD_CMD}"
                    //sh "mv ./build/libs/*.SHOT.jar ./"
                    //sh 'dockre 

                //}
            }
        }

        stage('deploy'){
            steps{
                sh 'pwd'
                sh 'ls -al'
                sh "docker build -t ${env.BACKEND} ./backend"
                sh "docker run -d -it -p 8080:8080 --name ${env.BACKEND} ${env.BACKEND} /bin/sh"
            }
        }
    }
}

